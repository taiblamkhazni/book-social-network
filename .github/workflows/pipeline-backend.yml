name: BSN Backend API Pipeline

on:
  push:
    branches:
      - main
    paths:
      - book-network/**
      - docker/backend/**
      - "docker-compose.yml"
      - .github/workflows/*-backend.yml

jobs:
  build-dploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Setup DB
        uses: harmon758/postgresql-action@v1
        with:
            postgresql db: book_social_network
            postgresql user: username
            postgresql password: password
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "corretto"
      - name: Unit tests
        run: |
          cd book-network
          mvn -B test --file pom.xml
      - name: build backend
        run: |
          cd book-network
          mvn clean
          mvn -B package --file pom.xml
      - name: List root directory
        run: ls -la
      - name: Extract project version
        id: extract_version
        run: |
          cd book-network
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Set ENV variables
        run: |
            echo "APP_VERSION=${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_ENV
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}



#  compile:
#    runs-on: ubuntu-latest
#    name: Compile project
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "corretto"
#
#      - name: Set execute permissions for Maven Wrapper
#        run: chmod +x book-network/mvnw
#
#      - name: Compile project
#        run: |
#          cd book-network
#          ./mvnw clean compile
#
#  unit-tests:
#    runs-on: ubuntu-latest
#    name: Unit tests
#    steps:
#      - name: Setup DB
#        uses: harmon758/postgresql-action@v1
#        with:
#          postgresql db: book_social_network
#          postgresql user: username
#          postgresql password: password
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "corretto"
#
#      - name: Set execute permissions for Maven Wrapper
#        run: chmod +x book-network/mvnw
#
#      - name: Running Unit Tests
#        run: |
#          cd book-network
#          ./mvnw clean test
#
#  build:
#    runs-on: ubuntu-latest
#    name: Build backend
#    needs: [ compile, unit-tests ]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "corretto"
#
#      - name: Set execute permissions for Maven Wrapper
#        run: chmod +x book-network/mvnw
#
#      - name: Compile project
#        run: |
#          cd book-network
#          ./mvnw clean compile
#      - name: List root directory
#        run: ls -la .
#      - name: List book-network directory
#        run: ls -la ./book-network
#      - name: List docker directory
#        run: ls -la ./docker
#      - name: List docker directory
#        run: ls -la ./docker/backend
#
#  build-image:
#    name: Build Docker image
#    runs-on: ubuntu-latest
#    needs: [ build ]
#    steps:
#      - name: Setup JDK
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "corretto"
#
#      #      - name: Extract project version
#      #        id: extract_version
#      #        run: echo "VERSION=$(./book-network/mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
#      - name: List root directory
#        run: ls -la ./
#      - name: List book-network directory
#        run: ls -la ./book-network
#      - name: List docker directory
#        run: ls -la ./docker
#      - name: List docker directory
#        run: ls -la ./docker/backend
#      - name: Login to DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build & Push to DockerHub
#        uses: docker/build-push-action@v5
#        with:
#          context: docker/backend
#          file: Dockerfile
#          push: true
#          platforms: linux/amd64
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:0.0.3,${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
#          build-args: |
#            PROFILE=dev
#            APP_VERSION=0.0.3

#    name: Deploy to Google Cloud Run
#    runs-on: ubuntu-latest
#    needs: [ build-image ]
#    steps:
#      - name: Install Google Cloud CLI
#        uses: google-github-actions/setup-gcloud@v0.2.0
#        with:
#          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
#          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#
#      - name: Deploy to Google Cloud Run
#        run: |
#          gcloud run deploy bsn-api \
#            --image="${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_version.outputs.VERSION }}" \
#            --platform=managed \
#            --region=us-central1 \
#            --allow-unauthenticated
