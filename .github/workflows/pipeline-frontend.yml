# Nom du pipeline
name: BSN Frontend Pipeline

# Déclencheurs du pipeline
on:
  # Déclenché lors d'un push sur la branche 'main'
  push:
    branches:
      - main
    # Chemins spécifiques qui déclenchent le pipeline lorsqu'ils sont modifiés
    paths:
      - book-network-ui/**
      - docker/frontend/**
      - 'docker-compose.yml'
      - .github/workflows/*-frontend.yml

# Jobs du pipeline
jobs:
  # Job de construction de l'image Docker
  build-image:
    name: Build FE Docker image
    # Exécution sur un runner auto-hébergé
    runs-on: self-hosted
    steps:
      # Étape de récupération du code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Étape d'extraction de la version du projet
      - name: Extract project version
        id: extract_version
        run: |
          cd book-network-ui
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      # Étape de connexion à DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Étape de construction et de push sur DockerHub
      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: book-network-ui
          file: docker/frontend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-ui:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/bsn-ui:latest

  # Job de déploiement
  deploy:
    name: Deploy Frontend
    runs-on: self-hosted
    # Ce job nécessite que le job 'build-image' ait réussi
    needs: [ build-image ]
    steps:

      # Étape de création du dossier de déploiement
      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      # Étape de copie du fichier docker-compose
      - name: Copy docker-compose file
        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      # Étape de configuration des variables d'environnement et de déploiement
      - name: Set ENV variable and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          cd ci-cd
          docker compose -f docker-compose.yml pull -q
          docker compose -f docker-compose.yml up -d
          EOF